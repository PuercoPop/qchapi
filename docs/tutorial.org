#+TITLE: Common Lisp Web Development: From n00b to Pro (Hopefully)
* Intro
** Goals
** Structure
* ASDF files and Dependencies
** System definition
** Dependencies: Quicklisp
   To load the system we defined earlier and fetch whatever dependencies we wrote in the part before we load that system with quicklisp, provided that it is in the local projects directory. By default the local projects directory is "~/quicklisp/local-projects".

#+begin_src lisp
(ql:quickload :qchapi)
;; We can also do
(ql:quickload "qchapi")
#+end_src
** Namespaces (packages)
* App structure
* Postmodern
** Creating & Deleting the tables

To specify a table postmodern uses DAO[fn:2] classes:
#+begin_src lisp
(defclass word ()
  ((name :col-type string :initarg :name :accessor word-name))
  (:keys name)
  (:metaclass dao-class))
#+end_src

The function dao-table-definition returns the SQL string to create the table, so one can create tables from a dao class with the the following statement:
#+begin_src lisp
(pomo:execute (pomo:dao-table-definition 'word))
#+end_src

However as you, dao classes don't accomodate for inter-table relentionships such as foreign keys. To do so one must define a table. So for example for a definition that contains a foreign key the the word's name we would do the following:

#+begin_src lisp
(defclass definition ()
  ((id :col-type serial :reader definition-id)
   (content :col-type string :initarg :content :accessor definition-content)
   (word :col-type string :initarg :word :accessor definition-word))
  (:metaclass dao-class)
  (:keys id))

(deftable definition
  (!dao-def)
  (!foreign 'word 'word :primary-key))
#+end_src

And to create the table in the database from a table definition one has one can do:

#+begin_src lisp
(pomo:create-table 'definition)
#+end_src

However there is still one minor detail, if the table already exists attempting to create the table again would result in an error. We can use the function table-exists-p to check if it exists prior to attempting to create it, although I dislike the hassle of writing such boilerplate, hence we use the following macro

#+begin_src lisp
(defmacro ensure-table (table-name)
  `(unless (pomo:table-exists-p ,table-name)
     (pomo:create-table ',table-name)))
#+end_src

And now we are all set, to define one function to create all the tables in one go
#+begin_src lisp
(defun create-tables ()
  (with-connection *db*
    (ensure-table 'word)
    (ensure-table 'definition)
    (ensure-table 'example)))
#+end_src

*** Droping all the tables in database
    First we need a list of all the database tabes. To do so there is the list-tables command.

#+begin_src lisp
(defun drop-tables ()
  (with-connection *db*
    (let ((tables  (pomo:list-tables)))
      (dolist (table tables)
        (query (:drop-table table))))))
#+end_src

There is however a subtle error[fn:1] in this code. Due to foreign keys constraints, the tables must be dropped in an specific order.

** Working with the models

*** Inserting Data
    One can insert rows of data using the insert-dao function, which takes an instance of a class with dao-class as a metaclass.
#+begin_src lisp
(with-connection *db*
  (pomo:insert-dao (make-instance 'word :name "bobo")))
#+end_src

    However if one tries to insert a duplicate field it will raise an error. One can check if the object already exists with the function dao-exists-p. So we can write a macro ensure-word

#+begin_src lisp
(defmacro ensure-dao (dao-instance)
  `(unless (pomo:dao-exists-p ,dao-instance)
     (pomo:insert-dao ,dao-instance)))
#+end_src

And now we can don't have to worry about violation a non-duplicate constraint =D.

*** Selecting Data
    To retrieve data we have two functions, get-dao and select-dao. We use get-dao two retrieve daos by primary-keys; and select-dao to select a list of daos that match the test criter√≠a.

#+begin_src lisp
(with-connection *db*
  (pomo:get-dao 'word "bobo"))
#+end_src

Before we show how select dao works lets insert some more data.
#+begin_src lisp
(with-connection *db*
  (ensure-dao (make-instance 'definition
                             :content "es un piticlin"
                             :word "bobo")))

(with-connection *db*
  (ensure-dao (make-instance 'definition
                             :content "Una persona enamorada"
                             :word "bobo")))
#+end_src

And now to the examples:
#+begin_src lisp
;; To select all the definitions of the word "bobo"
(with-connection *db*
  (pomo:select-dao 'definition (:= :word "bobo")))

;; To narrow the selection to those words that include the word "enamorada"
(with-connection *db*
  (pomo:select-dao
   'definition
   (:and  (:like :content "%enamorada%")
          (:= :word "bobo"))))
#+end_src

*** Deleting Data

    For delete we have a similar procedure, but we have to pass an dao instance. We can use get-dao, select-dao or even make-instance. However using make-instance, everyslot muy be bound, including the primary key so it is not of much use:
#+begin_src lisp
;; Delete the first definition of the word "bobo"
(with-connection *db*
  (pomo:delete-dao (first (pomo:select-dao 'definition (:= :word "bobo")))))

;; Delete all the defintions of the word "bobo"
(with-connection *db*
  (dolist (row (pomo:select-dao 'definition (:= :word "bobo")))
    (pomo:delete-dao row)))

;; Just for completion
(with-connection *db*
  (pomo:delete-dao (make-instance 'word :name "bobo")))
#+end_src
*** Updating Data
* Ningle

* References
  - https://sites.google.com/site/sabraonthehill/postmodern-examples/

* Footnotes

[fn:1] Database error 2BP01: cannot drop table word because other objects depend on it
constraint definition_word_word_foreign on table definition depends on table word
Query: DROP TABLE word
   [Condition of type DATABASE-ERROR]

[fn:2] Direct Access Objects
